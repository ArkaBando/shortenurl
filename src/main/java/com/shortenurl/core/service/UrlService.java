package com.shortenurl.core.service;


import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.shortenurl.core.common.UrlEncoder;
import com.shortenurl.core.dto.FullUrl;
import com.shortenurl.core.dto.ShortUrl;
import com.shortenurl.core.model.UrlEntity;
import com.shortenurl.core.repository.UrlRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import java.util.List;
import java.util.concurrent.TimeUnit;

@Service
public class UrlService {

    final CacheLoader<String, FullUrl>
    loader = new CacheLoader<String, FullUrl>() {
        @Override
        public FullUrl load(String key) {
            return null;
        }
    };

   final LoadingCache<String, FullUrl> cache=CacheBuilder.newBuilder()
             .expireAfterAccess(30, TimeUnit.DAYS)
      .build(loader);

    public static final String HTTPS_SHORTEN_IO = "https://shorten.io/";

    Logger logger = LoggerFactory.getLogger(UrlService.class);

    private final UrlRepository urlRepository;

    @Autowired
    public UrlService(UrlRepository urlRepository) {
        this.urlRepository = urlRepository;
    }

    private UrlEntity get(Long id) {
        logger.info(String.format("Fetching Url from database for Id %d", id));
        UrlEntity urlEntity = urlRepository.findById(id).get();
        return urlEntity;
    }


    public FullUrl getFullUrl(String url) {
        String shortenString = url.contains(HTTPS_SHORTEN_IO)?url.replace(HTTPS_SHORTEN_IO,""):url;
        FullUrl fullurl = cache.getIfPresent(shortenString);
        if(null != fullurl){
            return fullurl;
        }
        UrlEntity entity = urlRepository.findUrlByShortUrl(shortenString);
       if(ObjectUtils.isEmpty(entity))
           throw new RuntimeException("No Url exist for :"+shortenString);
        logger.info(String.format("Retrieving full url for %s", shortenString));
        return new FullUrl(entity.getFullUrl());
    }

    private synchronized UrlEntity save(FullUrl fullUrl) {
         UrlEntity entity = urlRepository.save(new UrlEntity(fullUrl.getFullUrl()));
         String shortUrl = UrlEncoder.encoding(entity.getId());
         entity.setShortUrl(shortUrl);
         urlRepository.save(entity);
         cache.put(shortUrl,fullUrl);
         return entity;
    }

    /**
     * It saves the full url to database and uses the autogenerated id to convert to Base62 string
     *
     * @param fullUrl FullUrl object to be converted to shortened url
     * @return ShortUrl object
     */
    public ShortUrl getShortUrl(FullUrl fullUrl) {

        logger.info("Checking if the url already exists");
        List<UrlEntity> savedUrls = null;
        savedUrls = checkFullUrlAlreadyExists(fullUrl);

        UrlEntity savedUrl = null;

        if (savedUrls.isEmpty()) {
            logger.info(String.format("Saving Url %s to database", fullUrl.getFullUrl()));
            savedUrl = this.save(fullUrl);
            logger.debug(savedUrl.toString());
        }
        else {
            savedUrl = savedUrls.get(0);
            logger.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
        }


        logger.debug(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
        String shortUrlText = savedUrl.getShortUrl();
        logger.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), shortUrlText));

        return new ShortUrl(shortUrlText);
    }

    /**
     * Check if Url already exists in the database to prevent having same url stored multiple times
     *
     * @param fullUrl
     * @return list of UrlEntity objects, list will be empty if no results found
     */
    private List<UrlEntity> checkFullUrlAlreadyExists(FullUrl fullUrl) {
        return urlRepository.findUrlByFullUrl(fullUrl.getFullUrl());
    }
}
